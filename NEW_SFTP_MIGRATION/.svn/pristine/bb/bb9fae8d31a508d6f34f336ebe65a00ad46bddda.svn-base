package bo;

import java.io.File;
import java.io.FileInputStream;
import java.io.OutputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;

import org.apache.log4j.Logger;

import utilities.GenericUtilities;

import com.jcraft.jsch.Channel;
import com.jcraft.jsch.ChannelSftp;
import com.jcraft.jsch.JSch;

import dao.DatabaseMaster;

public class MiddleWare 
{
	public static final Logger logger = Logger.getLogger(MiddleWare.class);

	/*public void processFunction1(String bankcode)
	{

		LinkedHashMap<Integer, HashMap> map=fetchcommonData(bankcode,"");
		logger.info("Map SIZE:- "+map.size());
		LinkedHashMap<String, String> serverInfo=server_details(bankcode);
		logger.info("Map SIZE:- "+serverInfo.size());
		if(serverInfo.size()>0)
		{
			if(map.size()>0)
			{

				download_UploadFile(map, bankcode,serverInfo);

			}
		}

	}*/
	public void processFunction2(String bankcode,Connection connection)
	{

		logger.info("============Start processFunction2==========================");
		LinkedHashMap<Integer, HashMap> map=fetchcommonData(bankcode,"_app", connection);
		logger.info("Map SIZE:- "+map.size());
		LinkedHashMap<String, String> serverInfo=server_details1(bankcode,connection);
		logger.info("Map SIZE:- "+serverInfo.size());
		if(serverInfo.size()>0)
		{
			if(map.size()>0)
			{

				download_UploadFile(map, bankcode,serverInfo,connection);

			}
		}
		logger.info("============END processFunction2==========================");

	}



	public void download_UploadFile(LinkedHashMap<Integer, HashMap> map, String bankcode,LinkedHashMap<String,String>serverInfo,Connection connection )
	{
		int flag=0;
		com.jcraft.jsch.Session session = null;
		Channel channel = null;
		ChannelSftp channelSftp = null;
		Vector filelist = null; 
		int port =Integer.parseInt("22");
		JSch jsch = new JSch();

		try
		{
			for (Integer parameter : map.keySet()) 
			{

				HashMap<String,String> Data =map.get(parameter);
				String value=Data.get("method");
				logger.info("Method name:-"+value);

				if(flag==0)
				{
					flag=flag+1;
					session = jsch.getSession(serverInfo.get("username"),serverInfo.get("ip"),port); // connectivity to sftp server
					session.setPassword(serverInfo.get("sbms_password")); 
					session.setConfig("StrictHostKeyChecking", "no"); 
					logger.info("before connecting.....");
					session.connect(); 
					channel = session.openChannel("sftp"); 
					channel.connect(); 
					logger.info("after connecting.....");
					channelSftp = (ChannelSftp)channel; 
				}
				boolean	isDone=channelSftp.isConnected();
				if(isDone)
				{

					if(value.equals("Download"))
					{
						channelSftp.cd(Data.get("source_mount")+Data.get("source"));//source
						filelist = channelSftp.ls(Data.get("source_mount")+Data.get("source")); 
						String downloadPattern = bankcode+"*.xml";
						Vector<ChannelSftp.LsEntry> list = channelSftp.ls(downloadPattern);
						for (ChannelSftp.LsEntry oListItem : list) 
						{
							String destinationFolder ="";
							if(oListItem.getFilename().contains("DSCPAYREQ")||oListItem.getFilename().contains("EATPAYREQ"))
							{
								destinationFolder =Data.get("destination_mount")+bankcode+Data.get("destination").replace("/ePay/PaymentReqData/FromCPSMS/", "/DSC/PaymentReqData/Download/");
							}
							else
							{
								destinationFolder =Data.get("destination_mount")+bankcode+Data.get("destination");
							}



							//String destinationFolder =Data.get("destination_mount")+bankcode+Data.get("destination");
							channelSftp.lcd(destinationFolder);
							if(oListItem.getFilename() != null && oListItem.getFilename().endsWith(".xml") && !oListItem.getFilename().contains("Processed") )
							{
								channelSftp.get(oListItem.getFilename(), oListItem.getFilename());
								logger.info("file_name is : "+oListItem.getFilename());
								logger.info("Went to rename file on SFTP for file :"+oListItem.getFilename());
								try{
									DatabaseMaster.FileInformation(bankcode, oListItem.getFilename(), connection, value);
									//channelSftp.rename(oListItem.getFilename(), oListItem.getFilename().substring(0, oListItem.getFilename().length()-3)+"Processed"+".xml");
									if(bankcode.equals("520")||oListItem.getFilename().contains("520"))
									{
										channelSftp.lcd("/pfms/520cpsms/RegularFromCPSMS/");
										channelSftp.get(oListItem.getFilename(), oListItem.getFilename());	
									}
									
									
									
									channelSftp.rename(oListItem.getFilename(), Data.get("archieve_mount")+Data.get("archieve_path")+oListItem.getFilename()+".Processed");

								}
								catch(Exception e)
								{
									/*	e.printStackTrace();
							channelSftp.rm(oListItem.getFilename().substring(0, oListItem.getFilename().length()-3)+"Processed"+".xml");
							channelSftp.rename(oListItem.getFilename(), oListItem.getFilename().substring(0, oListItem.getFilename().length()-3)+"Processed"+".xml");
									 */

									try
									{
										
										channelSftp.rename(oListItem.getFilename(), oListItem.getFilename()+".Processed");
									}catch(Exception e1)
									{
										channelSftp.rm(oListItem.getFilename());
										//debugLog.error("Error while moving file in to Archive for bank code"+BankCode);
									}

								}
							}	

						}
						//donwload code

					}else
					{
						boolean	isDone1=channelSftp.isConnected();

						String destinationpath="";
						File folder = new File(Data.get("source_mount")+bankcode+Data.get("source"));
						File[] file = folder.listFiles();
						if(file!=null)
						{
							for (File f : file)
							{
								if(!f.getName().contains("DONE") && !f.getName().contains("ARCHIEVE") )
								{

									if(f.getName().contains("EAT"))
									{
										if(!destinationpath.contains("EAT"))
										{
											if(Data.get("destination").contains("AccountsData"))
											{
												destinationpath=Data.get("destination_mount")+"/EAT/"+Data.get("destination").replace("AccountsData", "AccountValidation").replace("ToCPSMS", "ToPFMS");
											}
											else if(Data.get("destination").contains("/ePay/PaymentReqData/"))
											{
												destinationpath=Data.get("destination_mount")+"/EAT/"+Data.get("destination").replace("/ePay/PaymentReqData/", "/PayReq/").replace("ToCPSMS", "ToPFMS");
											}
											else if(Data.get("destination").contains("/ePay/PaymentInitiatedData/"))
											{
												destinationpath=Data.get("destination_mount")+"/EAT/"+Data.get("destination").replace("/ePay/PaymentInitiatedData/", "/PayIni/").replace("ToCPSMS", "ToPFMS");
											}
											else if(Data.get("destination").contains("/ePay/PaymentSuccessData/"))
											{
												destinationpath=Data.get("destination_mount")+"/EAT/"+Data.get("destination").replace("/ePay/PaymentSuccessData/", "/PaySuc/").replace("ToCPSMS", "ToPFMS");
											}
											else if(Data.get("destination").contains("/ePay/PaymentRejectionData/"))
											{
												destinationpath=Data.get("destination_mount")+"/EAT/"+Data.get("destination").replace("/ePay/PaymentRejectionData/", "/PayRej/").replace("ToCPSMS", "ToPFMS");
											}
											else
											{
												destinationpath=Data.get("destination_mount")+Data.get("destination");
											}

										}

									}
									else if(f.getName().contains("PMK"))
									{
										if(!destinationpath.contains("PMK"))
										{
											if(Data.get("destination").contains("AccountsData"))
											{
												destinationpath=Data.get("destination_mount")+"/PMK/"+Data.get("destination").replace("AccountsData", "AccountValidation").replace("ToCPSMS", "ToPFMS");
											}
											else if(Data.get("destination").contains("/ePay/PaymentReqData/"))
											{
												destinationpath=Data.get("destination_mount")+"/PMK/"+Data.get("destination").replace("/ePay/PaymentReqData/", "/PayReq/").replace("ToCPSMS", "ToPFMS");
											}
											else if(Data.get("destination").contains("/ePay/PaymentInitiatedData/"))
											{
												destinationpath=Data.get("destination_mount")+"/PMK/"+Data.get("destination").replace("/ePay/PaymentInitiatedData/", "/PayIni/").replace("ToCPSMS", "ToPFMS");
											}
											else if(Data.get("destination").contains("/ePay/PaymentSuccessData/"))
											{
												destinationpath=Data.get("destination_mount")+"/PMK/"+Data.get("destination").replace("/ePay/PaymentSuccessData/", "/PaySuc/").replace("ToCPSMS", "ToPFMS");
											}
											else if(Data.get("destination").contains("/ePay/PaymentRejectionData/"))
											{
												destinationpath=Data.get("destination_mount")+"/PMK/"+Data.get("destination").replace("/ePay/PaymentRejectionData/", "/PayRej/").replace("ToCPSMS", "ToPFMS");
											}
											else
											{
												destinationpath=Data.get("destination_mount")+Data.get("destination");
											}										}

									}
									else
									{
										destinationpath=Data.get("destination_mount")+Data.get("destination");

									}


									if(isDone1)
									{
										channelSftp.cd(destinationpath);//source
										//filelist = channelSftp.ls(Data.get("destination_mount")+Data.get("destination")); 

										String source2=f.toString();
										FileInputStream fis = null;
										fis = new FileInputStream(new File(source2));
										channelSftp.put(fis, f.getName());
										DatabaseMaster.FileInformation(bankcode, f.getName(), connection, value);
										//	channelSftp.disconnect();
										if(fis!=null)
											fis.close();


										File dir = new File(Data.get("archieve_mount")+bankcode+Data.get("archieve_path"));
										// Move file to new directory
										if(f.length() > 0){
											try
											{
												boolean success = f.renameTo(new File(dir, f.getName()));
												logger.info("File moved to Archive ToCPSMS >> ToCPSMSArchive"+success);
												//if(success==false)
												//{
													
													try
													{
														logger.info("File is not moove to Archive path:- "+f.getName());
														String shCommand="mv "+f.toString()+" "+dir+"/"+f.getName();
														logger.info("File is moving into achive :- "+shCommand);
														Runtime rt = Runtime.getRuntime();
														Process prcs = null; 
														// run the command
														prcs = rt.exec(shCommand);
													}catch(Exception e1)
													{
														logger.error("Exception for MV cammand for file:- "+f.getName());
													}
													
													
													
													//f.renameTo(new File(dir,f.getName().concat(".Quick.DONE")));
												//}
											}catch(Exception e)
											{
												try
												{
													logger.error("File is not moove to Archive path:- "+f.getName());
													String shCommand="mv "+f.toString()+" "+dir+"/"+f.getName();
													logger.error("File is moving into achive :- "+shCommand);
													Runtime rt = Runtime.getRuntime();
													Process prcs = null; 
													// run the command
													prcs = rt.exec(shCommand);
												}catch(Exception e1)
												{
													logger.error("Exception for MV cammand for file:- "+f.getName());
												}

											}
										}else{
											logger.info("File size is zero");
										}

									}
								}
							}
						}


						//upload code

					}
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();

		}finally
		{

			try {

				//System.out.println("Inside finally block of FTP-upload()");
				if(session!=null)
					session.disconnect();
				if(channel!=null)
					channel.disconnect();
				if(channelSftp!=null)
				{
					channelSftp.disconnect();
					channelSftp.exit();
				}
				//logger.info("channelSftp.isClosed()"+channelSftp.isClosed());
				//System.out.println("channelSftp.isClosed()"+channelSftp.isClosed());
				//logger.info("channelSftp.isConnected()"+channelSftp.isConnected());
				//System.out.println("channelSftp.isConnected()"+channelSftp.isConnected());
				if(filelist!=null)
					filelist.clear();


			} catch (Exception e) {
				logger.error(GenericUtilities.printException(e));
				logger.info(GenericUtilities.printException(e));
				logger.error("Exception while closing connection in download files for bank code :"+bankcode);
			}

		}
	}
	public LinkedHashMap<String, String> server_details1(String bankcode,Connection connection)
	{
		//Connection connection =  null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet=null;
		LinkedHashMap<String, String>serverInfo=new LinkedHashMap<String, String>();
		try
		{
			//connection=DatabaseMaster.getConnection(bankcode);
			String query="select cedge_ip,cedge_username, cedge_password from banks_on_app where bankcode='"+bankcode+"' and DWN_UP='Y'";
			logger.info("server_details sQL="+query);
			preparedStatement = connection.prepareStatement(query);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next())
			{
				serverInfo.put("ip", resultSet.getString("cedge_ip"));
				serverInfo.put("username", resultSet.getString("cedge_username"));
				serverInfo.put("sbms_password", resultSet.getString("cedge_password"));
			}



		}catch(Exception e)
		{

		}finally
		{
			try
			{
				if(preparedStatement!=null)
					preparedStatement.close();
				if(resultSet!=null)
					resultSet.close();

			}catch(Exception e)
			{

			}

		}
		return serverInfo;

	}

	public LinkedHashMap<String, String> server_details(String bankcode)
	{
		Connection connection =  null;
		PreparedStatement preparedStatement = null;
		ResultSet resultSet=null;
		LinkedHashMap<String, String>serverInfo=new LinkedHashMap<String, String>();
		try
		{
			connection=DatabaseMaster.getConnection(bankcode);
			String query="select ip,username, sbms_password from banks_on_app where bankcode='"+bankcode+"'";
			logger.info("server_details sQL="+query);
			preparedStatement = connection.prepareStatement(query);
			resultSet = preparedStatement.executeQuery();
			if(resultSet.next())
			{
				serverInfo.put("ip", resultSet.getString("ip"));
				serverInfo.put("username", resultSet.getString("username"));
				serverInfo.put("sbms_password", resultSet.getString("sbms_password"));
			}



		}catch(Exception e)
		{

		}finally
		{
			try
			{
				if(preparedStatement!=null)
					preparedStatement.close();
				if(resultSet!=null)
					resultSet.close();
				if(connection!=null)
					connection.close();
			}catch(Exception e)
			{

			}

		}
		return serverInfo;

	}

	public  LinkedHashMap<Integer, HashMap> fetchcommonData(String bankcode, String code,Connection connection)
	{

		PreparedStatement preparedStatement = null;
		ResultSet resultSet=null;
		LinkedHashMap<Integer, HashMap>map=new LinkedHashMap<Integer, HashMap>();
		try
		{
			//connection=DatabaseMaster.getConnection(bankcode);
			int count=0;
			String query=" select source, source_mount,destination_mount, destination,archieve_mount, archieve_path,moduletype,method from  PFMS_PATH"+code +" where bankcode='"+bankcode+"' " ;
			logger.info("fetchcommonData SQL:-"+query);
			preparedStatement = connection.prepareStatement(query);
			resultSet = preparedStatement.executeQuery();


			LinkedHashMap<String, String>map1=null;
			while(resultSet.next())
			{
				count=count+1;
				map1=new LinkedHashMap<String, String>();
				map1.put("source", resultSet.getString("source"));
				map1.put("source_mount", resultSet.getString("source_mount"));
				map1.put("destination_mount", resultSet.getString("destination_mount"));
				map1.put("destination", resultSet.getString("destination"));
				map1.put("archieve_mount", resultSet.getString("archieve_mount"));
				map1.put("archieve_path", resultSet.getString("archieve_path"));
				map1.put("moduletype", resultSet.getString("moduletype"));
				map1.put("method", resultSet.getString("method"));

				map.put(count, map1);	 
			}

		}catch(Exception e)
		{
			e.printStackTrace();
		}finally
		{
			try
			{
				if(preparedStatement!=null)
					preparedStatement.close();
				if(resultSet!=null)
					resultSet.close();

			}catch(Exception e)
			{

			}

		}
		return map;

	}

}
